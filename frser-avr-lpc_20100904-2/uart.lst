   1               		.file	"uart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 103               	.global	__vector_18
 105               	__vector_18:
 106               		.stabd	46,0,0
   1:uart.c        **** /*
   2:uart.c        ****  * This file is part of the frser-avr-lpc project.
   3:uart.c        ****  *
   4:uart.c        ****  * Copyright (C) 2010 Mike Stirling
   5:uart.c        ****  *
   6:uart.c        ****  * This program is free software; you can redistribute it and/or modify
   7:uart.c        ****  * it under the terms of the GNU General Public License as published by
   8:uart.c        ****  * the Free Software Foundation; either version 2 of the License, or
   9:uart.c        ****  * (at your option) any later version.
  10:uart.c        ****  *
  11:uart.c        ****  * This program is distributed in the hope that it will be useful,
  12:uart.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:uart.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:uart.c        ****  * GNU General Public License for more details.
  15:uart.c        ****  *
  16:uart.c        ****  * You should have received a copy of the GNU General Public License
  17:uart.c        ****  * along with this program; if not, write to the Free Software
  18:uart.c        ****  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
  19:uart.c        ****  * 
  20:uart.c        ****  * \file uart.c
  21:uart.c        ****  * \brief Buffered, interrupt driven UART and debugging functions
  22:uart.c        ****  * 
  23:uart.c        ****  * UART driver for ATMEL AVR ATMEGA.  Provides buffered IO
  24:uart.c        ****  * and integration with stdio.
  25:uart.c        ****  * 
  26:uart.c        ****  * \author	(C) 2004-2007 Mike Stirling 
  27:uart.c        ****  * 			($Author$)
  28:uart.c        ****  * \version	$Revision$
  29:uart.c        ****  * \date	$Date$
  30:uart.c        ****  */
  31:uart.c        ****  
  32:uart.c        **** #include <avr/io.h>
  33:uart.c        **** #include <avr/interrupt.h>
  34:uart.c        **** #include <avr/signal.h>
  35:uart.c        **** 
  36:uart.c        **** #include "uart.h"
  37:uart.c        **** 
  38:uart.c        **** /// Allocate receive buffer
  39:uart.c        **** static char rxbuffer[RX_BUFFER_SIZE];
  40:uart.c        **** /// Allocate transmit buffer
  41:uart.c        **** static char txbuffer[TX_BUFFER_SIZE];
  42:uart.c        **** /// Points to the current receive buffer head location
  43:uart.c        **** static volatile char *rxbufhead;
  44:uart.c        **** /// Points to the current receive buffer tail location
  45:uart.c        **** static volatile char *rxbuftail;
  46:uart.c        **** /// Points to the current transmit buffer head location
  47:uart.c        **** static volatile char *txbufhead;
  48:uart.c        **** /// Points to the current transmit buffer tail location
  49:uart.c        **** static volatile char *txbuftail;
  50:uart.c        **** /// Flags
  51:uart.c        **** static volatile unsigned char uart_flags;
  52:uart.c        **** 
  53:uart.c        **** #if UART_IS_STDIO
  54:uart.c        **** static int uart_writec(char c, FILE *f);
  55:uart.c        **** static int uart_readc(FILE *f);
  56:uart.c        **** 
  57:uart.c        **** // Assign streams
  58:uart.c        **** static FILE uart_stdout = FDEV_SETUP_STREAM(uart_writec,NULL,_FDEV_SETUP_WRITE);
  59:uart.c        **** static FILE uart_stdin = FDEV_SETUP_STREAM(NULL,uart_readc,_FDEV_SETUP_READ);
  60:uart.c        **** #endif
  61:uart.c        **** 
  62:uart.c        **** /// Receive interrupt handler. Circularly buffers up incoming data
  63:uart.c        **** ISR(USART_RX_vect)
  64:uart.c        **** {
 108               	.LM0:
 109               	.LFBB1:
 110 0000 1F92      		push r1
 111 0002 0F92      		push r0
 112 0004 0FB6      		in r0,__SREG__
 113 0006 0F92      		push r0
 114 0008 1124      		clr __zero_reg__
 115 000a 2F93      		push r18
 116 000c 3F93      		push r19
 117 000e 8F93      		push r24
 118 0010 9F93      		push r25
 119 0012 EF93      		push r30
 120 0014 FF93      		push r31
 121               	/* prologue: Signal */
 122               	/* frame size = 0 */
 123               	/* stack size = 9 */
 124               	.L__stack_usage = 9
  65:uart.c        **** 	char c = _UDR;
 126               	.LM1:
 127 0016 8091 C600 		lds r24,198
  66:uart.c        **** 	
  67:uart.c        **** 	// If the buffer is full then the data will be lost
  68:uart.c        **** 	if (! (uart_flags & _BV(UART_FLAGS_OVERFLOW))) {
 129               	.LM2:
 130 001a 9091 0000 		lds r25,uart_flags
 131 001e 90FD      		sbrc r25,0
 132 0020 00C0      		rjmp .L1
  69:uart.c        **** 		*rxbufhead++ = c;
 134               	.LM3:
 135 0022 E091 0000 		lds r30,rxbufhead
 136 0026 F091 0000 		lds r31,rxbufhead+1
 137 002a 9F01      		movw r18,r30
 138 002c 2F5F      		subi r18,-1
 139 002e 3F4F      		sbci r19,-1
 140 0030 3093 0000 		sts rxbufhead+1,r19
 141 0034 2093 0000 		sts rxbufhead,r18
 142 0038 8083      		st Z,r24
  70:uart.c        **** 		uart_flags |= _BV(UART_FLAGS_RXAVAIL);
 144               	.LM4:
 145 003a 8091 0000 		lds r24,uart_flags
 146 003e 8460      		ori r24,lo8(4)
 147 0040 8093 0000 		sts uart_flags,r24
  71:uart.c        **** 		if (rxbufhead == rxbuffer + RX_BUFFER_SIZE)
 149               	.LM5:
 150 0044 2050      		subi r18,lo8(rxbuffer+128)
 151 0046 3040      		sbci r19,hi8(rxbuffer+128)
 152 0048 01F4      		brne .L4
  72:uart.c        **** 			rxbufhead = rxbuffer;
 154               	.LM6:
 155 004a 80E0      		ldi r24,lo8(rxbuffer)
 156 004c 90E0      		ldi r25,hi8(rxbuffer)
 157 004e 9093 0000 		sts rxbufhead+1,r25
 158 0052 8093 0000 		sts rxbufhead,r24
 159               	.L4:
  73:uart.c        **** 		if (rxbufhead == rxbuftail)
 161               	.LM7:
 162 0056 2091 0000 		lds r18,rxbufhead
 163 005a 3091 0000 		lds r19,rxbufhead+1
 164 005e 8091 0000 		lds r24,rxbuftail
 165 0062 9091 0000 		lds r25,rxbuftail+1
 166 0066 2817      		cp r18,r24
 167 0068 3907      		cpc r19,r25
 168 006a 01F4      		brne .L1
  74:uart.c        **** 			uart_flags |= _BV(UART_FLAGS_OVERFLOW);
 170               	.LM8:
 171 006c 8091 0000 		lds r24,uart_flags
 172 0070 8160      		ori r24,lo8(1)
 173 0072 8093 0000 		sts uart_flags,r24
 174               	.L1:
 175               	/* epilogue start */
  75:uart.c        **** 	}
  76:uart.c        **** }
 177               	.LM9:
 178 0076 FF91      		pop r31
 179 0078 EF91      		pop r30
 180 007a 9F91      		pop r25
 181 007c 8F91      		pop r24
 182 007e 3F91      		pop r19
 183 0080 2F91      		pop r18
 184 0082 0F90      		pop r0
 185 0084 0FBE      		out __SREG__,r0
 186 0086 0F90      		pop r0
 187 0088 1F90      		pop r1
 188 008a 1895      		reti
 193               	.Lscope1:
 195               		.stabd	78,0,0
 197               	.global	__vector_19
 199               	__vector_19:
 200               		.stabd	46,0,0
  77:uart.c        **** 
  78:uart.c        **** /// Transmit interrupt handler. Transmit tx buffer contents
  79:uart.c        **** ISR(USART_UDRE_vect)
  80:uart.c        **** {
 202               	.LM10:
 203               	.LFBB2:
 204 008c 1F92      		push r1
 205 008e 0F92      		push r0
 206 0090 0FB6      		in r0,__SREG__
 207 0092 0F92      		push r0
 208 0094 1124      		clr __zero_reg__
 209 0096 2F93      		push r18
 210 0098 8F93      		push r24
 211 009a 9F93      		push r25
 212 009c EF93      		push r30
 213 009e FF93      		push r31
 214               	/* prologue: Signal */
 215               	/* frame size = 0 */
 216               	/* stack size = 8 */
 217               	.L__stack_usage = 8
  81:uart.c        **** 	// Check if data is available for transmission
  82:uart.c        **** 	if ((txbufhead != txbuftail) || (uart_flags & _BV(UART_FLAGS_TXFULL))) {
 219               	.LM11:
 220 00a0 E091 0000 		lds r30,txbuftail
 221 00a4 F091 0000 		lds r31,txbuftail+1
 222 00a8 8091 0000 		lds r24,txbufhead
 223 00ac 9091 0000 		lds r25,txbufhead+1
 224 00b0 8E17      		cp r24,r30
 225 00b2 9F07      		cpc r25,r31
 226 00b4 01F4      		brne .L8
 228               	.LM12:
 229 00b6 8091 0000 		lds r24,uart_flags
 230 00ba 81FF      		sbrs r24,1
 231 00bc 00C0      		rjmp .L9
 232               	.L8:
  83:uart.c        **** 		_UDR = *txbuftail++;
 234               	.LM13:
 235 00be CF01      		movw r24,r30
 236 00c0 0196      		adiw r24,1
 237 00c2 9093 0000 		sts txbuftail+1,r25
 238 00c6 8093 0000 		sts txbuftail,r24
 239 00ca 8081      		ld r24,Z
 240 00cc 8093 C600 		sts 198,r24
  84:uart.c        **** 		uart_flags &= ~_BV(UART_FLAGS_TXFULL);
 242               	.LM14:
 243 00d0 8091 0000 		lds r24,uart_flags
 244 00d4 8D7F      		andi r24,lo8(-3)
 245 00d6 8093 0000 		sts uart_flags,r24
  85:uart.c        **** 		if (txbuftail == txbuffer + TX_BUFFER_SIZE)
 247               	.LM15:
 248 00da 8091 0000 		lds r24,txbuftail
 249 00de 9091 0000 		lds r25,txbuftail+1
 250 00e2 8050      		subi r24,lo8(txbuffer+32)
 251 00e4 9040      		sbci r25,hi8(txbuffer+32)
 252 00e6 01F4      		brne .L7
  86:uart.c        **** 			txbuftail = txbuffer;
 254               	.LM16:
 255 00e8 80E0      		ldi r24,lo8(txbuffer)
 256 00ea 90E0      		ldi r25,hi8(txbuffer)
 257 00ec 9093 0000 		sts txbuftail+1,r25
 258 00f0 8093 0000 		sts txbuftail,r24
 259 00f4 00C0      		rjmp .L7
 260               	.L9:
  87:uart.c        **** 	} else {
  88:uart.c        **** 		// Buffer empty - disable the interrupt
  89:uart.c        **** #if UART_IS_UART
  90:uart.c        **** 		UCSRB = _BV(TXEN) | _BV(RXEN) | _BV(RXCIE);
  91:uart.c        **** #else
  92:uart.c        **** 		UCSR0B = _BV(TXEN0) | _BV(RXEN0) | _BV(RXCIE0);
 262               	.LM17:
 263 00f6 88E9      		ldi r24,lo8(-104)
 264 00f8 8093 C100 		sts 193,r24
 265               	.L7:
 266               	/* epilogue start */
  93:uart.c        **** #endif
  94:uart.c        **** 	}
  95:uart.c        **** }
 268               	.LM18:
 269 00fc FF91      		pop r31
 270 00fe EF91      		pop r30
 271 0100 9F91      		pop r25
 272 0102 8F91      		pop r24
 273 0104 2F91      		pop r18
 274 0106 0F90      		pop r0
 275 0108 0FBE      		out __SREG__,r0
 276 010a 0F90      		pop r0
 277 010c 1F90      		pop r1
 278 010e 1895      		reti
 280               	.Lscope2:
 282               		.stabd	78,0,0
 284               	.global	uart_poll
 286               	uart_poll:
 287               		.stabd	46,0,0
  96:uart.c        **** 
  97:uart.c        **** /// \brief Returns true if a call to uart_getc will not block
  98:uart.c        **** /// Checks the receive buffer pointers to determine whether or not data
  99:uart.c        **** /// is available for reading.
 100:uart.c        **** /// \return TRUE if a read will not block, FALSE else.
 101:uart.c        **** unsigned char uart_poll(void)
 102:uart.c        **** {
 289               	.LM19:
 290               	.LFBB3:
 291               	/* prologue: function */
 292               	/* frame size = 0 */
 293               	/* stack size = 0 */
 294               	.L__stack_usage = 0
 103:uart.c        **** 	return (uart_flags & _BV(UART_FLAGS_RXAVAIL));
 296               	.LM20:
 297 0110 8091 0000 		lds r24,uart_flags
 104:uart.c        **** }
 299               	.LM21:
 300 0114 8470      		andi r24,lo8(4)
 301 0116 0895      		ret
 303               	.Lscope3:
 305               		.stabd	78,0,0
 307               	.global	uart_flush
 309               	uart_flush:
 310               		.stabd	46,0,0
 105:uart.c        **** 
 106:uart.c        **** /// \brief Block until the transmit buffer is empty
 107:uart.c        **** /// Checks the transmit buffer pointers to determine whether or not unsent
 108:uart.c        **** /// data is remaining, and blocks until the buffer is empty.
 109:uart.c        **** void uart_flush(void)
 110:uart.c        **** {
 312               	.LM22:
 313               	.LFBB4:
 314               	/* prologue: function */
 315               	/* frame size = 0 */
 316               	/* stack size = 0 */
 317               	.L__stack_usage = 0
 111:uart.c        **** 	while ((txbufhead != txbuftail) || (uart_flags & _BV(UART_FLAGS_TXFULL)));
 319               	.LM23:
 320 0118 2091 0000 		lds r18,txbufhead
 321 011c 3091 0000 		lds r19,txbufhead+1
 322 0120 4091 0000 		lds r20,txbuftail
 323 0124 5091 0000 		lds r21,txbuftail+1
 324               	.L13:
 326               	.LM24:
 327 0128 2417      		cp r18,r20
 328 012a 3507      		cpc r19,r21
 329 012c 01F4      		brne .L13
 331               	.LM25:
 332 012e 8091 0000 		lds r24,uart_flags
 333 0132 81FD      		sbrc r24,1
 334 0134 00C0      		rjmp .L13
 335               	/* epilogue start */
 112:uart.c        **** }
 337               	.LM26:
 338 0136 0895      		ret
 340               	.Lscope4:
 342               		.stabd	78,0,0
 344               	.global	uart_getc
 346               	uart_getc:
 347               		.stabd	46,0,0
 113:uart.c        **** 
 114:uart.c        **** /// Read a single character from the receive buffer, blocking until one becomes
 115:uart.c        **** /// available.
 116:uart.c        **** /// \return Character read from buffer
 117:uart.c        **** char uart_getc(void)
 118:uart.c        **** {
 349               	.LM27:
 350               	.LFBB5:
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 0 */
 354               	.L__stack_usage = 0
 355               	.L18:
 356               	.LBB4:
 357               	.LBB5:
 103:uart.c        **** }
 359               	.LM28:
 360 0138 8091 0000 		lds r24,uart_flags
 361               	.LBE5:
 362               	.LBE4:
 119:uart.c        **** 	char c;
 120:uart.c        **** 	
 121:uart.c        **** 	// Busy wait until data is available
 122:uart.c        **** 	while (!uart_poll());
 364               	.LM29:
 365 013c 82FF      		sbrs r24,2
 366 013e 00C0      		rjmp .L18
 123:uart.c        **** 
 124:uart.c        **** 	// Start critical section
 125:uart.c        **** 	cli();
 368               	.LM30:
 369               	/* #APP */
 370               	 ;  125 "uart.c" 1
 371 0140 F894      		cli
 372               	 ;  0 "" 2
 126:uart.c        **** 	c = *rxbuftail++;
 374               	.LM31:
 375               	/* #NOAPP */
 376 0142 E091 0000 		lds r30,rxbuftail
 377 0146 F091 0000 		lds r31,rxbuftail+1
 378 014a 9F01      		movw r18,r30
 379 014c 2F5F      		subi r18,-1
 380 014e 3F4F      		sbci r19,-1
 381 0150 3093 0000 		sts rxbuftail+1,r19
 382 0154 2093 0000 		sts rxbuftail,r18
 383 0158 8081      		ld r24,Z
 127:uart.c        **** 	uart_flags &= ~_BV(UART_FLAGS_OVERFLOW);
 385               	.LM32:
 386 015a 9091 0000 		lds r25,uart_flags
 387 015e 9E7F      		andi r25,lo8(-2)
 388 0160 9093 0000 		sts uart_flags,r25
 128:uart.c        **** 	if (rxbuftail == rxbuffer + RX_BUFFER_SIZE)
 390               	.LM33:
 391 0164 2050      		subi r18,lo8(rxbuffer+128)
 392 0166 3040      		sbci r19,hi8(rxbuffer+128)
 393 0168 01F4      		brne .L19
 129:uart.c        **** 		rxbuftail = rxbuffer;
 395               	.LM34:
 396 016a 20E0      		ldi r18,lo8(rxbuffer)
 397 016c 30E0      		ldi r19,hi8(rxbuffer)
 398 016e 3093 0000 		sts rxbuftail+1,r19
 399 0172 2093 0000 		sts rxbuftail,r18
 400               	.L19:
 130:uart.c        **** 	if (rxbuftail == rxbufhead)
 402               	.LM35:
 403 0176 4091 0000 		lds r20,rxbuftail
 404 017a 5091 0000 		lds r21,rxbuftail+1
 405 017e 2091 0000 		lds r18,rxbufhead
 406 0182 3091 0000 		lds r19,rxbufhead+1
 407 0186 4217      		cp r20,r18
 408 0188 5307      		cpc r21,r19
 409 018a 01F4      		brne .L20
 131:uart.c        **** 		uart_flags &= ~_BV(UART_FLAGS_RXAVAIL);
 411               	.LM36:
 412 018c 9091 0000 		lds r25,uart_flags
 413 0190 9B7F      		andi r25,lo8(-5)
 414 0192 9093 0000 		sts uart_flags,r25
 415               	.L20:
 132:uart.c        **** 	// End critical section
 133:uart.c        **** 	sei();
 417               	.LM37:
 418               	/* #APP */
 419               	 ;  133 "uart.c" 1
 420 0196 7894      		sei
 421               	 ;  0 "" 2
 134:uart.c        **** 
 135:uart.c        **** 	return c;
 136:uart.c        **** }
 423               	.LM38:
 424               	/* #NOAPP */
 425 0198 0895      		ret
 430               	.Lscope5:
 432               		.stabd	78,0,0
 435               	.global	uart_putc
 437               	uart_putc:
 438               		.stabd	46,0,0
 137:uart.c        **** 
 138:uart.c        **** /// Place a single character in the transmit buffer ready for transmission, if
 139:uart.c        **** /// necessary, blocking until space becomes available.
 140:uart.c        **** /// \param c Character to be transmitted
 141:uart.c        **** void uart_putc(char c)
 142:uart.c        **** {
 440               	.LM39:
 441               	.LFBB6:
 442               	/* prologue: function */
 443               	/* frame size = 0 */
 444               	/* stack size = 0 */
 445               	.L__stack_usage = 0
 446               	.L24:
 143:uart.c        **** 	// Busy wait until space is available
 144:uart.c        **** 	while (uart_flags & _BV(UART_FLAGS_TXFULL));
 448               	.LM40:
 449 019a 9091 0000 		lds r25,uart_flags
 450 019e 91FD      		sbrc r25,1
 451 01a0 00C0      		rjmp .L24
 145:uart.c        **** 
 146:uart.c        **** 	// Put the new character in the buffer
 147:uart.c        **** 	// Start critical section
 148:uart.c        **** 	cli();
 453               	.LM41:
 454               	/* #APP */
 455               	 ;  148 "uart.c" 1
 456 01a2 F894      		cli
 457               	 ;  0 "" 2
 149:uart.c        **** 	*txbufhead++ = c;
 459               	.LM42:
 460               	/* #NOAPP */
 461 01a4 E091 0000 		lds r30,txbufhead
 462 01a8 F091 0000 		lds r31,txbufhead+1
 463 01ac 9F01      		movw r18,r30
 464 01ae 2F5F      		subi r18,-1
 465 01b0 3F4F      		sbci r19,-1
 466 01b2 3093 0000 		sts txbufhead+1,r19
 467 01b6 2093 0000 		sts txbufhead,r18
 468 01ba 8083      		st Z,r24
 150:uart.c        **** 	if (txbufhead == txbuffer + TX_BUFFER_SIZE)
 470               	.LM43:
 471 01bc 2050      		subi r18,lo8(txbuffer+32)
 472 01be 3040      		sbci r19,hi8(txbuffer+32)
 473 01c0 01F4      		brne .L25
 151:uart.c        **** 		txbufhead = txbuffer;
 475               	.LM44:
 476 01c2 80E0      		ldi r24,lo8(txbuffer)
 477 01c4 90E0      		ldi r25,hi8(txbuffer)
 478 01c6 9093 0000 		sts txbufhead+1,r25
 479 01ca 8093 0000 		sts txbufhead,r24
 480               	.L25:
 152:uart.c        **** 	if (txbufhead == txbuftail)
 482               	.LM45:
 483 01ce 2091 0000 		lds r18,txbufhead
 484 01d2 3091 0000 		lds r19,txbufhead+1
 485 01d6 8091 0000 		lds r24,txbuftail
 486 01da 9091 0000 		lds r25,txbuftail+1
 487 01de 2817      		cp r18,r24
 488 01e0 3907      		cpc r19,r25
 489 01e2 01F4      		brne .L26
 153:uart.c        **** 		uart_flags |= _BV(UART_FLAGS_TXFULL);
 491               	.LM46:
 492 01e4 8091 0000 		lds r24,uart_flags
 493 01e8 8260      		ori r24,lo8(2)
 494 01ea 8093 0000 		sts uart_flags,r24
 495               	.L26:
 154:uart.c        **** 	// End critical section
 155:uart.c        **** 	sei();
 497               	.LM47:
 498               	/* #APP */
 499               	 ;  155 "uart.c" 1
 500 01ee 7894      		sei
 501               	 ;  0 "" 2
 156:uart.c        **** 
 157:uart.c        **** 	// Enable the transmit interrupt to commence transmitting
 158:uart.c        **** #if UART_IS_UART
 159:uart.c        **** 	UCSRB = _BV(TXEN) | _BV(RXEN) | _BV(RXCIE) | _BV(UDRIE);
 160:uart.c        **** #else
 161:uart.c        **** 	UCSR0B = _BV(TXEN0) | _BV(RXEN0) | _BV(RXCIE0) | _BV(UDRIE0);
 503               	.LM48:
 504               	/* #NOAPP */
 505 01f0 88EB      		ldi r24,lo8(-72)
 506 01f2 8093 C100 		sts 193,r24
 507 01f6 0895      		ret
 509               	.Lscope6:
 511               		.stabd	78,0,0
 513               	.global	uart_init
 515               	uart_init:
 516               		.stabd	46,0,0
 162:uart.c        **** #endif
 163:uart.c        **** }
 164:uart.c        **** 
 165:uart.c        **** #if UART_IS_STDIO
 166:uart.c        **** /// Wrapper function for interfacing with stdio fdevopen.
 167:uart.c        **** /// Replaces line-feed characters with a
 168:uart.c        **** /// carriage return/line-feed pair and add to transmit buffer.
 169:uart.c        **** /// Other characters are passed through unaffected.
 170:uart.c        **** /// \param c Character to be transmitted
 171:uart.c        **** /// \param f Dummy file pointer
 172:uart.c        **** /// \return Always 0.  Dummy return value to allow the character to be used with avrlib stdio
 173:uart.c        **** static int uart_writec(char c, FILE *f)
 174:uart.c        **** {
 175:uart.c        **** 	if (c == '\n') uart_putc('\r');
 176:uart.c        **** 	uart_putc(c);
 177:uart.c        **** 	return 0;
 178:uart.c        **** }
 179:uart.c        **** 
 180:uart.c        **** /// Wrapper function for interfacing with stdio fdevopen.
 181:uart.c        **** /// Provides blocking character read.
 182:uart.c        **** /// \param f Dummy file pointer
 183:uart.c        **** /// \return Character that was read
 184:uart.c        **** static int uart_readc(FILE *f)
 185:uart.c        **** {
 186:uart.c        **** 	return (int)uart_getc();
 187:uart.c        **** }
 188:uart.c        **** #endif
 189:uart.c        **** 
 190:uart.c        **** /// Open the UART and assign stdin and stdout if requested
 191:uart.c        **** void uart_init(void)
 192:uart.c        **** {
 518               	.LM49:
 519               	.LFBB7:
 520               	/* prologue: function */
 521               	/* frame size = 0 */
 522               	/* stack size = 0 */
 523               	.L__stack_usage = 0
 193:uart.c        **** 	// Initialise the buffers
 194:uart.c        **** 	uart_flags = 0;
 525               	.LM50:
 526 01f8 1092 0000 		sts uart_flags,__zero_reg__
 195:uart.c        **** 	rxbufhead = rxbuftail = rxbuffer;
 528               	.LM51:
 529 01fc 80E0      		ldi r24,lo8(rxbuffer)
 530 01fe 90E0      		ldi r25,hi8(rxbuffer)
 531 0200 9093 0000 		sts rxbuftail+1,r25
 532 0204 8093 0000 		sts rxbuftail,r24
 533 0208 9093 0000 		sts rxbufhead+1,r25
 534 020c 8093 0000 		sts rxbufhead,r24
 196:uart.c        **** 	txbufhead = txbuftail = txbuffer;
 536               	.LM52:
 537 0210 80E0      		ldi r24,lo8(txbuffer)
 538 0212 90E0      		ldi r25,hi8(txbuffer)
 539 0214 9093 0000 		sts txbuftail+1,r25
 540 0218 8093 0000 		sts txbuftail,r24
 541 021c 9093 0000 		sts txbufhead+1,r25
 542 0220 8093 0000 		sts txbufhead,r24
 197:uart.c        **** 
 198:uart.c        **** 	// Configure and enable the UART according to the setup
 199:uart.c        **** 	// defined in uart.h
 200:uart.c        **** #if UART_IS_UART
 201:uart.c        **** 	#if UART_HIGHSPEED
 202:uart.c        **** 		UCSRA = _BV(U2X);
 203:uart.c        **** 	#else
 204:uart.c        **** 		UCSRA = 0;
 205:uart.c        **** 	#endif
 206:uart.c        **** 
 207:uart.c        **** 		UCSRB = 0;
 208:uart.c        **** 		UCSRC = _BV(URSEL);
 209:uart.c        **** 
 210:uart.c        **** 	#if UART_SYNC
 211:uart.c        **** 		UCSRC |= _BV(UMSEL);
 212:uart.c        **** 	#endif
 213:uart.c        **** 
 214:uart.c        **** 	#if (UART_STOPBITS == 1)
 215:uart.c        **** 	#elif (UART_STOPBITS == 2)
 216:uart.c        **** 		UCSRC |= _BV(USBS);
 217:uart.c        **** 	#else
 218:uart.c        **** 	# error Invalid number of stop bits specified in uart.h
 219:uart.c        **** 	#endif
 220:uart.c        **** 
 221:uart.c        **** 	#if (UART_DATABITS == 5)
 222:uart.c        **** 	#elif (UART_DATABITS == 6)
 223:uart.c        **** 		UCSRC |= _BV(UCSZ0);
 224:uart.c        **** 	#elif (UART_DATABITS == 7)
 225:uart.c        **** 		UCSRC |= _BV(UCSZ1);
 226:uart.c        **** 	#elif (UART_DATABITS == 8)
 227:uart.c        **** 		UCSRC |= _BV(UCSZ0) | _BV(UCSZ1);
 228:uart.c        **** 	#else
 229:uart.c        **** 	# error Invalid number of data bits specified in uart.h
 230:uart.c        **** 	#endif
 231:uart.c        **** 
 232:uart.c        **** 	#if (UART_PARITY == 0)
 233:uart.c        **** 	#elif (UART_PARITY == 1)
 234:uart.c        **** 		UCSRC |= _BV(UPM0) | _BV(UPM1);
 235:uart.c        **** 	#elif (UART_PARITY == 2)
 236:uart.c        **** 		UCSRC |= _BV(UPM1);
 237:uart.c        **** 	#else
 238:uart.c        **** 	# error Invalid parity setting specified in uart.h
 239:uart.c        **** 	#endif
 240:uart.c        **** #else
 241:uart.c        **** 	#if UART_HIGHSPEED
 242:uart.c        **** 		UCSR0A = _BV(U2X0);
 544               	.LM53:
 545 0224 82E0      		ldi r24,lo8(2)
 546 0226 8093 C000 		sts 192,r24
 243:uart.c        **** 	#else
 244:uart.c        **** 		UCSR0A = 0;
 245:uart.c        **** 	#endif
 246:uart.c        **** 
 247:uart.c        **** 		UCSR0B = 0;
 548               	.LM54:
 549 022a A1EC      		ldi r26,lo8(-63)
 550 022c B0E0      		ldi r27,0
 551 022e 1C92      		st X,__zero_reg__
 248:uart.c        **** 		UCSR0C = 0;
 553               	.LM55:
 554 0230 E2EC      		ldi r30,lo8(-62)
 555 0232 F0E0      		ldi r31,0
 556 0234 1082      		st Z,__zero_reg__
 249:uart.c        **** 
 250:uart.c        **** 	#if UART_SYNC
 251:uart.c        **** 		UCSR0C |= _BV(UMSEL00);
 252:uart.c        **** 	#endif
 253:uart.c        **** 
 254:uart.c        **** 	#if (UART_STOPBITS == 1)
 255:uart.c        **** 	#elif (UART_STOPBITS == 2)
 256:uart.c        **** 		UCSR0C |= _BV(USBS0);
 257:uart.c        **** 	#else
 258:uart.c        **** 	# error Invalid number of stop bits specified in uart.h
 259:uart.c        **** 	#endif
 260:uart.c        **** 
 261:uart.c        **** 	#if (UART_DATABITS == 5)
 262:uart.c        **** 	#elif (UART_DATABITS == 6)
 263:uart.c        **** 		UCSR0C |= _BV(UCSZ00);
 264:uart.c        **** 	#elif (UART_DATABITS == 7)
 265:uart.c        **** 		UCSR0C |= _BV(UCSZ01);
 266:uart.c        **** 	#elif (UART_DATABITS == 8)
 267:uart.c        **** 		UCSR0C |= _BV(UCSZ00) | _BV(UCSZ01);
 558               	.LM56:
 559 0236 8081      		ld r24,Z
 560 0238 8660      		ori r24,lo8(6)
 561 023a 8083      		st Z,r24
 268:uart.c        **** 	#else
 269:uart.c        **** 	# error Invalid number of data bits specified in uart.h
 270:uart.c        **** 	#endif
 271:uart.c        **** 
 272:uart.c        **** 	#if (UART_PARITY == 0)
 273:uart.c        **** 	#elif (UART_PARITY == 1)
 274:uart.c        **** 		UCSR0C |= _BV(UPM00) | _BV(UPM01);
 275:uart.c        **** 	#elif (UART_PARITY == 2)
 276:uart.c        **** 		UCSR0C |= _BV(UPM01);
 277:uart.c        **** 	#else
 278:uart.c        **** 	# error Invalid parity setting specified in uart.h
 279:uart.c        **** 	#endif
 280:uart.c        **** #endif
 281:uart.c        **** 	_UBRR = UART_BAUDCONST;
 563               	.LM57:
 564 023c 80E1      		ldi r24,lo8(16)
 565 023e 90E0      		ldi r25,0
 566 0240 9093 C500 		sts 196+1,r25
 567 0244 8093 C400 		sts 196,r24
 282:uart.c        **** 
 283:uart.c        **** #if UART_IS_STDIO
 284:uart.c        **** 	// Map stdio
 285:uart.c        **** 	stdout = &uart_stdout;
 286:uart.c        **** 	stderr = &uart_stdout;
 287:uart.c        **** 	stdin = &uart_stdin;
 288:uart.c        **** #endif
 289:uart.c        **** 
 290:uart.c        **** 	// Enable rx interrupts - main code must globally enable interrupts
 291:uart.c        **** #if UART_IS_UART
 292:uart.c        **** 	UCSRB = _BV(TXEN) | _BV(RXEN) | _BV(RXCIE);
 293:uart.c        **** #else
 294:uart.c        **** 	UCSR0B = _BV(TXEN0) | _BV(RXEN0) | _BV(RXCIE0);
 569               	.LM58:
 570 0248 88E9      		ldi r24,lo8(-104)
 571 024a 8C93      		st X,r24
 572 024c 0895      		ret
 574               	.Lscope7:
 576               		.stabd	78,0,0
 577               		.local	uart_flags
 578               		.comm	uart_flags,1,1
 579               		.local	txbuftail
 580               		.comm	txbuftail,2,1
 581               		.local	txbufhead
 582               		.comm	txbufhead,2,1
 583               		.local	rxbuftail
 584               		.comm	rxbuftail,2,1
 585               		.local	rxbufhead
 586               		.comm	rxbufhead,2,1
 587               		.local	txbuffer
 588               		.comm	txbuffer,32,1
 589               		.local	rxbuffer
 590               		.comm	rxbuffer,128,1
 599               	.Letext0:
 600               		.ident	"GCC: (GNU) 4.9.2"
 601               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart.c
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:4      *ABS*:000000000000003f __SREG__
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:105    .text:0000000000000000 __vector_18
                             .bss:0000000000000000 uart_flags
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:584    .bss:0000000000000007 rxbufhead
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:588    .bss:0000000000000029 rxbuffer
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:582    .bss:0000000000000005 rxbuftail
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:199    .text:000000000000008c __vector_19
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:578    .bss:0000000000000001 txbuftail
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:580    .bss:0000000000000003 txbufhead
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:586    .bss:0000000000000009 txbuffer
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:286    .text:0000000000000110 uart_poll
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:309    .text:0000000000000118 uart_flush
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:346    .text:0000000000000138 uart_getc
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:437    .text:000000000000019a uart_putc
/var/folders/rg/7f3yqwg10fgcvvw7zpv9kx780000gp/T//ccA5Eutw.s:515    .text:00000000000001f8 uart_init

UNDEFINED SYMBOLS
__do_clear_bss
